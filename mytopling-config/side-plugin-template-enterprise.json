{
  "http": {
    "document_root": "/var/lib/mysql/infolog",
    "hide_files_patterns": "*.sst|*.dbtmp",
    "num_threads": "50",
    "listening_ports": "8000"
  },
  "permissions": {
    "web_compact": true
  },
  "AnyPlugin": {
    "sys_info": "SysInfoShower",
    "git_info": "GitInfoShower",
    "hex_key_coder": {
      "class": "HexUserKeyCoder",
      "params": {
        "prefix_len": 4
      }
    }
  },
  "Statistics": {
    "stat": {
      "class": "default",
      "params": {
        "discard_tickers": [
          "# comment",
          "// comment: 可以仅指定前缀，必须是以 . 为边界的前缀，例如下面两个必须分别指定",
          "rocksdb.block.cache",
          "rocksdb.block.cachecompressed",
          "# comment: 上面两个也可以用下面这一个概括",
          "rocksdb.block",
          "# 精确指定",
          "rocksdb.memtable.payload.bytes.at.flush",
          "rocksdb.memtable.garbage.bytes.at.flush",
          "rocksdb.blobdb",
          "rocksdb.row.cache",
          "rocksdb.number.block",
          "rocksdb.bloom.filter",
          "rocksdb.persistent",
          "rocksdb.sim.block.cache",
          "rocksdb.persistent"
        ],
        "discard_histograms": [
          "# comment: ....",
          "rocksdb.blobdb",
          "rocksdb.bytes.compressed",
          "rocksdb.bytes.decompressed",
          "rocksdb.num.index.and.filter.blocks.read.per.level",
          "rocksdb.num.data.blocks.read.per.level",
          "rocksdb.compression.times.nanos",
          "rocksdb.decompression.times.nanos",
          "rocksdb.read.block.get.micros",
          "rocksdb.write.raw.block.micros",
          "# comment end of array"
        ],
        "stats_level": "kExceptDetailedTimers"
      }
    }
  },
  "CompactionFilterFactory": {
    "compact_filter": {
      "class": "Rdb_compact_filter_factory",
      "params": {}
    }
  },
  "Cache": {
    "block_cache": {
      "class": "LRUCache",
      "params": {
        "capacity": "4G",
        "num_shard_bits": -1,
        "strict_capacity_limit": false,
        "high_pri_pool_ratio": 0.75,
        "use_adaptive_mutex": false,
        "metadata_charge_policy": "kFullChargeCacheMetadata"
      }
    }
  },
  "Comparator": {
    "bytewise": {
      "class": "BytewiseComparator",
      "params": {
        "need-not-any-param": "keep empty"
      }
    },
    "rev": {
      "class": "ReverseBytewiseComparator",
      "params": {
        "need-not-any-param": "used for rev cf"
      }
    }
  },
  "TableFactory": {
    "auto_sort": {
      "class": "VecAutoSortTable",
      "params": {
        "debugLevel": 0,
        "fileWriteBufferSize": "64K",
        "collectProperties": false,
        "forceNeedCompact": true
      }
    },
    "bb": {
      "comment": "this TableFactory is for migrating existing MyRocks data to MyTopling",
      "class": "BlockBasedTable",
      "params": {
        "block_cache": "${block_cache}",
        "index_type": "kTwoLevelIndexSearch",
        "block_size": "8K"
      }
    },
    "sng": {
      "class": "SingleFastTable",
      "params": {
        "needCompactOnOmitPropsCollector":true,
        "debugLevel": 0
      }
    },
    "light_dzip": {
      "comment1": "Disable value zip for faster compression speed",
      "comment2": "Index and Tag(Seq+ValueType) will still be compressed",
      "class": "ToplingZipTable",
      "params": {
        "localTempDir": "/var/lib/mysql/tmp",
	      "needCompactMaxLevel": 2,
        "builderMinLevel": 0,
        "acceptCompressionRatio": 0.8,
        "enableStatistics": false,
        "warmupLevel": "kIndex",
        "optimizeCpuL3Cache": true,
        "offsetArrayBlockUnits": 0,
        "sampleRatio": 0.01,
        "keyRankCacheRatio": 0.001,
        "checksumLevel": 0,
        "entropyAlgo": "kNoEntropy",
        "debugLevel": 0,
        "large minDictZipValueSize will disable value zip": "10M",
        "minDictZipValueSize": "10M",
        "keyPrefixLen": 4,
        "minPreadLen": -1
      }
    },
    "dzip": {
      "class": "ToplingZipTable",
      "params": {
        "localTempDir": "/var/lib/mysql/tmp",
        "indexMemAsResident": false,
        "builderMinLevel": 0,
        "acceptCompressionRatio": 0.8,
        "enableStatistics": false,
        "warmupLevel": "kIndex",
        "optimizeCpuL3Cache": true,
        "offsetArrayBlockUnits": 128,
        "sampleRatio": 0.01,
        "keyRankCacheRatio": 0.001,
        "checksumLevel": 0,
        "entropyAlgo": "kNoEntropy",
        "debugLevel": 0,
        "minDictZipValueSize": "30",
        "keyPrefixLen": 4,
        "minPreadLen": 64
      }
    },
    "cspp_memtab_sst": {
      "class": "CSPPMemTabTable",
      "params": {}
    },
    "dispatch": {
      "class": "DispatcherTable",
      "params": {
        "default": "sng",
        "readers": {
          "VecAutoSortTable": "auto_sort",
          "BlockBasedTable": "bb",
          "CSPPMemTabTable": "cspp_memtab_sst",
          "ToplingZipTable": "dzip",
          "SingleFastTable": "sng"
        },
        "level_writers": [
          "sng",
          "sng",
          "light_dzip",
          "dzip",
          "dzip",
          "dzip",
          "dzip",
          "dzip"
        ],
        "//auto_compaction_max_wamp": 10,
        "//trivial_move_always_max_output_level": 4
      }
    }
  },
  "MemTableRepFactory": {
    "dyna": {
      "class": "Dyna",
      "params": {
        "real_fac": "${cspp}"
      }
    },
    "cspp": {
      "class": "cspp",
      "params": {
        "mem_cap": "4G",
        "chunk_size": "256K",
        "use_vm": false,
        "use_hugepage": false,
        "//0 convert_to_sst": "kDontConvert is the default",
        "//1 convert_to_sst": "kDontConvert",
        "//2 convert_to_sst": "kDumpMem",
        "convert_to_sst": "kFileMmap",
        "sync_sst_file": true,
        "read_by_writer_token": true,
        "token_use_idle": true
      }
    },
    "cspp_small": {
      "class": "cspp",
      "params": {
        "mem_cap": "16M",
        "chunk_size": "32K",
        "use_vm": false,
        "use_hugepage": false,
        "read_by_writer_token": true,
        "token_use_idle": true
      }
    },
    "skiplist": {
      "class": "SkipList",
      "params": {
        "lookahead": 0
      }
    }
  },
  "WBWIFactory": {
    "cspp": {
      "class": "CSPP_WBWI",
      "params": {
        "//data_max_cap": "4G",
        "trie_reserve_cap": "128K",
        "data_reserve_cap": "512K"
      }
    },
    "skiplist": {
      "class": "SkipList",
      "params": {}
    }
  },
  "MergeOperator": {
    "system_merge_op": {
      "class": "Rdb_system_merge_op",
      "params": {}
    }
  },
  "TablePropertiesCollectorFactory": {
    "tbl_prop_coll": {
      "class": "Rdb_tbl_prop_coll_factory",
      "params": {}
    }
  },
  "SstPartitionerFactory": {
    "by_prefix": {
      "class": "FixedPrefix",
      "params": {
        "prefix_len": 4
      }
    }
  },
  "CFOptions": {
    "common-cfo": {
      "num_levels": 7,
      "//max_bytes_for_level_multiplier": 10,
      "max_bytes_for_level_multiplier": 1,
      "max_bytes_for_level_multiplier_additional": [
        1,
        3,
        5,
        7,
        10,
        10,
        10,
        10
      ],
      "max_compaction_bytes": "4G",
      "ignore_max_compaction_bytes_for_input": false,
      "min_filter_level": 2,
      "level_compaction_dynamic_file_size": false,
      "level0_file_num_compaction_trigger": 4,
      "level0_slowdown_writes_trigger": 5,
      "level0_stop_writes_trigger": 10,
      "disable_auto_compactions": true,
      "max_write_buffer_number": 2,
      "target_file_size_multiplier": 2,
      "table_factory": "${dispatch}"
    },
    "default": {
      "template": "${common-cfo}",
      "sst_partitioner_factory": "by_prefix",
      "memtable_factory": "${dyna}",
      "write_buffer_size": "512M",
      "max_write_buffer_size_to_maintain": "256M",
      "target_file_size_base": "32M",
      "html_user_key_coder": "${hex_key_coder}",
      "soft_pending_compaction_bytes_limit": "128G",
      "hard_pending_compaction_bytes_limit": "256G",
      "table_properties_collector_factories": [
        "${tbl_prop_coll}"
      ],
      "check_flush_compaction_key_order": false,
      "paranoid_file_checks": false,
      "compaction_filter_factory": "${compact_filter}"
    },
    "__system__": {
      "template": "${common-cfo}",
      "memtable_factory": "${cspp_small}",
      "write_buffer_size": "8M",
      "target_file_size_base": "8M",
      "merge_operator": "${system_merge_op}"
    },
    "encrypt": {
      "template": "${default}",
      "cf_paths": "/path/to/cf_datadir/encrypt"
    },
    "default_sk": {
      "template": "${default}",
      "//cf_paths": "/path/to/cf_datadir/default_sk"
    },
    "rev:order": {
      "template": "${default}",
      "comparator": "${rev}"
    },
    "__tmp__": {
      "template": "${default}",
      "//cf_paths": "/path/to/cf_datadir/__tmp__"
    },
    "__tmp_system__": {
      "template": "${__system__}",
      "//cf_paths": "/path/to/cf_datadir/__tmp_system__"
    }
  },
  "DBOptions": {
    "dbopt": {
      "localTempDir": "/var/lib/mysql/tmp",
      "db_log_dir": "/var/lib/mysql/infolog/.rocksdb/",
      "allow_fdatasync": false,
      "advise_random_on_open": true,
      "create_if_missing": true,
      "create_missing_column_families": true,
      "max_background_flushes": 2,
      "max_background_compactions": 7,
      "max_subcompactions": 1,
      "max_level1_subcompactions": 3,
      "max_log_file_size": "256M",
      "keep_log_file_num": 100,
      "inplace_update_support": false,
      "WAL_size_limit_MB": 0,
      "wbwi_factory": "${cspp}",
      "statistics": "${stat}",
      "allow_mmap_reads": false
    }
  },
  "TransactionDBMutexFactory": {
    "mtx_fac": {
      "class": "Rdb_mutex_factory",
      "params": {}
    }
  },
  "databases": {
    ".rocksdb": {
      "method": "TransactionDB::Open",
      "params": {
        "db_options": "${dbopt}",
        "txn_db_options": {
          "key_prefix_len": 4,
          "super_stripes": 1,
          "num_stripes": 19,
          "transaction_lock_timeout": 2000,
          "custom_mutex_factory": "${mtx_fac}"
        },
        "column_families": {
          "default": "${default}",
          "__system__": "${__system__}",
          "encrypt": "${encrypt}"
        }
      }
    }
  },
  "open": "${.rocksdb}"
}